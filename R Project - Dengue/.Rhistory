varLag_iq$lag <- as.numeric(varLag_iq$lag)
colnames(varLag_iq) <- colnames(varLag_sj)
jj <- NULL
max1 <- NULL
lag1 <- NULL
varLag_iq <- NULL
for (jj in c(2:length(lagCorr_iq))){
max1 <- c(max1, max(lagCorr_iq[,jj]))
lag1 <- c(lag1, lagCorr_iq[which(lagCorr_iq[,jj] == max1[jj-1]), 1])
}
varLag_iq <- data.frame(cbind(lag1, max1, colnames(lagCorr_iq)[c(2:21)]))
colnames(varLag_iq) <- colnames(varLag_sj)
varLag_iq$lag <- as.character(varLag_iq$lag)
varLag_iq$lag <- as.numeric(varLag_iq$lag)
#### Feature Engineer - Create lagged variables ####
# Define names of new variables
lag_names <- colnames(lagCorr_sj)[c(2:21)]
lag_names <- c("precipitation_amt_mm_lag", "reanalysis_air_temp_k_lag", "reanalysis_avg_temp_k_lag", "reanalysis_dew_point_temp_k_lag",
"reanalysis_max_air_temp_k_lag", "reanalysis_min_air_temp_k_lag", "reanalysis_precip_amt_kg_per_m2_lag", "reanalysis_relative_humidity_percent_lag",
"reanalysis_sat_precip_amt_mm_lag", "reanalysis_specific_humidity_g_per_kg_lag", "reanalysis_tdtr_k_lag", "station_avg_temp_c_lag",
"avg_calc_lag", "station_diur_temp_rng_c_lag", "reanalysis_max_air_temp_k.1_lag", "reanalysis_min_air_temp_k.1_lag",
"station_max_temp_c_lag", "station_min_temp_c_lag", "station_precip_mm_lag", "total_cases_lag")
class(varLag_sj$lag)
class(varLag_iq$lag)
# Create and store lagged variables in df
for (k in c(1:ncol(dengue_sj[,c(5:24)]))){
variabel <- dengue_sj[,4+k]
if (varLag_sj$lag[k] < 0){
nas <- c(rep(NA, abs(as.numeric(varLag_sj$lag[k]))))
rest <- variabel[c(1:(length(dengue_sj[,4+k])-length(nas)))]
df.lagged <- data.frame(c(nas, rest))
} else {
nas <- c(rep(NA, abs(as.numeric(varLag_sj$lag[k]))))
rest <- variabel[c((length(nas)+1):(length(dengue_sj[,4+k])))]
df.lagged <- data.frame(c(rest, nas))
}
colnames(df.lagged)[1] <- lag_names[k]
dengue_sj <- cbind(dengue_sj, df.lagged)
}
for (k in c(1:ncol(dengue_iq[,c(5:24)]))){
variabel <- dengue_iq[,4+k]
if (varLag_iq$lag[k] < 0){
nas <- c(rep(NA, abs(as.numeric(varLag_iq$lag[k]))))
rest <- variabel[c(1:(length(dengue_iq[,4+k])-length(nas)))]
df.lagged <- data.frame(c(nas, rest))
} else {
nas <- c(rep(NA, abs(as.numeric(varLag_iq$lag[k]))))
rest <- variabel[c((length(nas)+1):(length(dengue_iq[,4+k])))]
df.lagged <- data.frame(c(rest, nas))
}
colnames(df.lagged)[1] <- lag_names[k]
dengue_iq <- cbind(dengue_iq, df.lagged)
}
View(dengue_sj)
View(dengue_sj)
View(dengue_iq)
View(dengue_iq)
# Calculate corr matrix for lagged data
lag_corr_sj <- dengue_sj[c(11:917), c(25:38, 41:44)]
sum(is.na(lag_corr_sj))
lag_corr_iq <- dengue_iq[c(11:463), c(25:38, 41:44)]
sum(is.na(lag_corr_iq))
dengue_sj_lag_corr <- rcorr(as.matrix(lag_corr_sj))
dengue_iq_lag_corr <- rcorr(as.matrix(lag_corr_iq))
# Visualization of correlation matrix
corrplot(dengue_sj_lag_corr$r, method = "number",
addrect = 6, rect.col = "black",
type = "upper",
tl.col="black", tl.srt=90, tl.cex = 0.65, tl.pos = "t",
addgrid.col = "lightgray")
corrplot(dengue_iq_lag_corr$r, method = "number",
addrect = 6, rect.col = "black",
type = "upper",
tl.col="black", tl.srt=90, tl.cex = 0.65, tl.pos = "t",
addgrid.col = "lightgray")
#### Normalization and Data-splitting
## Normalization
dengue_sj_n <- dengue_sj[c(11:917), c(3, 5:44)]
dengue_iq_n <- dengue_iq[c(11:453), c(3, 5:44)]
str(dengue_sj_n)
for (i in c(1:40)) {
dengue_sj_n[, i] <- normalize(dengue_sj_n[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
for (i in c(1:40)) {
dengue_iq_n[, i] <- normalize(dengue_iq_n[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
View(dengue_iq_n)
View(dengue_iq_n)
sj <- dengue_sj_n[, c(1:21, 41)]
sj_lag <- dengue_sj_n[, c(1, 22:41)]
View(sj)
View(sj)
#### Normalization and Data-splitting
## Normalization
dengue_sj_n <- dengue_sj[c(11:917), c(3, 5:44)]
dengue_iq_n <- dengue_iq[c(11:453), c(3, 5:44)]
View(dengue_iq_n)
View(dengue_iq_n)
View(dengue_sj_n)
View(dengue_sj_n)
str(dengue_sj_n)
for (i in c(1:40)) {
dengue_sj_n[, i] <- normalize(dengue_sj_n[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
for (i in c(1:40)) {
dengue_iq_n[, i] <- normalize(dengue_iq_n[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
sj <- dengue_sj_n[, c(1:21, 41)]
sj_lag <- dengue_sj_n[, c(1, 22:41)]
View(sj)
View(sj)
View(sj_lag)
View(sj_lag)
iq <- dengue_iq_n[, c(1:21, 41)]
iq_lag <- dengue_iq_n[, c(1, 22:41)]
View(iq_lag)
View(iq_lag)
View(iq)
View(iq)
View(sj)
View(sj)
## Data splitting
set.seed(123)
inTrain_sj <- createDataPartition(y = sj_lag$total_cases_lag,
p = .80,
list = FALSE)
inTrain_iq <- createDataPartition(y = iq_lag$total_cases_lag,
p = .80,
list = FALSE)
trainS_sj <- sj_lag[inTrain_sj,]
testS_sj  <- sj_lag[-inTrain_sj,]
trainS_iq <- iq_lag[inTrain_iq,]
testS_iq  <- iq_lag[-inTrain_iq,]
## Create dfs w/ independent(x) and independent(y) variable
x_sj <- trainS_sj[, c(1, 3, 5, 7, 11, 13, 18:19)]
y_sj <- trainS_sj[, 21]
y_sj <- as.numeric(y_sj)
class(y_sj)
x_sj_test <- testS_sj[, c(1, 3, 5, 7, 11, 13, 18:19)]
y_sj_test <- testS_sj[, 21]
x_iq <- trainS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
y_iq <- trainS_iq[, 21]
y_iq <- as.numeric(y_iq)
class(y_iq)
x_iq_test <- testS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
y_iq_test <- testS_iq[, 21]
View(x_iq)
View(x_iq)
View(x_sj)
View(x_sj)
#### Train, evaluate, forecast ####
## Train model - Selection
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
number = 10,
allowParallel = TRUE,
savePredictions = "final"
)
models_list_iq <- caretEnsemble::caretList(x = x_iq,
y = y_iq,
trControl = ctrl,
methodList = c("rf", "glm", "gbm", "glmboost",
"treebag",
"parRF",                                 #pack: e1071
"extraTrees",                            #pack: extraTrees
"svmLinear", "svmRadial", "svmRadial",
"rotationForestCp",                      #pack: rotationForest
"rpart",
"C5.0",                                  #pack: C50
"LogitBoost",                            #pack: caTools
"adaboost",                              #pack: fastAdaboost
"randomGLM",                             #pack: randomGLM
"xgbTree"                                #pack: xgboost
#"elm",                                  #pack:elmNN
#"monmlp",
#"dnn",                                  #deepnet
#"nnet",
#"pcaNNet"                               #nnet
),
preProc = c("center", "scale"),    # Center and scale predictors for training
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
tuneLength = 3                     # Automatic Tuning Grid
)
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
#svmRadial
#RMSE   Rsquared        MAE
#50.5499016  0.2531654 21.2976794
l_Acc_iq <- lapply(l_pred_mlist_iq, function(x) postResample(x, obs = y_iq_test))
l_Acc_iq
View(trainS_iq)
View(trainS_iq)
#x_iq <- trainS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
x_iq <- trainS_iq[, c(5, 11)]
y_iq <- trainS_iq[, 21]
models_list_iq <- caretEnsemble::caretList(x = x_iq,
y = y_iq,
trControl = ctrl,
methodList = c("rf",
#"glm",
"gbm", #"glmboost",
"treebag",
"parRF",                                 #pack: e1071
"extraTrees",                            #pack: extraTrees
"svmLinear", "svmRadial", "svmRadial",
"rotationForestCp",                      #pack: rotationForest
#"rpart",
"C5.0",                                  #pack: C50
"LogitBoost",                            #pack: caTools
"adaboost",                              #pack: fastAdaboost
"randomGLM",                             #pack: randomGLM
"xgbTree"                                #pack: xgboost
#"elm",                                  #pack:elmNN
#"monmlp",
#"dnn",                                  #deepnet
#"nnet",
#"pcaNNet"                               #nnet
),
preProc = c("center", "scale"),    # Center and scale predictors for training
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
tuneLength = 3                     # Automatic Tuning Grid
)
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
#svmRadial
#RMSE   Rsquared        MAE
#50.5499016  0.2531654 21.2976794
l_Acc_iq <- lapply(l_pred_mlist_iq, function(x) postResample(x, obs = y_iq_test))
l_Acc_iq
#x_iq <- trainS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
x_iq <- trainS_iq[, c(5, 11, 14, 17)]
x_iq
models_list_iq <- caretEnsemble::caretList(x = x_iq,
y = y_iq,
trControl = ctrl,
methodList = c("rf",
#"glm",
"gbm", #"glmboost",
"treebag",
#"parRF",                                 #pack: e1071
"extraTrees",                            #pack: extraTrees
"svmLinear", "svmRadial", "svmRadial",
"rotationForestCp",                      #pack: rotationForest
#"rpart",
"C5.0",                                  #pack: C50
"LogitBoost",                            #pack: caTools
"adaboost",                              #pack: fastAdaboost
"randomGLM",                             #pack: randomGLM
"xgbTree"                                #pack: xgboost
#"elm",                                  #pack:elmNN
#"monmlp",
#"dnn",                                  #deepnet
#"nnet",
#"pcaNNet"                               #nnet
),
preProc = c("center", "scale"),    # Center and scale predictors for training
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
tuneLength = 2                     # Automatic Tuning Grid
)
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
models_list_iq
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
#x_iq_test <- testS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
x_iq_test <- testS_iq[, c(5, 11, 14, 17)]
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
#svmRadial
#RMSE   Rsquared        MAE
#50.5499016  0.2531654 21.2976794
l_Acc_iq <- lapply(l_pred_mlist_iq, function(x) postResample(x, obs = y_iq_test))
l_Acc_iq
#x_iq <- trainS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
x_iq <- trainS_iq[, c(5, 7, 9, 11, 14, 17)]
#x_iq_test <- testS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
x_iq_test <- testS_iq[, c(5, 7, 9, 11, 14, 17)]
models_list_iq <- caretEnsemble::caretList(x = x_iq,
y = y_iq,
trControl = ctrl,
methodList = c("rf",
#"glm",
"gbm", #"glmboost",
"treebag",
#"parRF",                                 #pack: e1071
"extraTrees",                            #pack: extraTrees
"svmLinear", "svmRadial", "svmRadial",
"rotationForestCp",                      #pack: rotationForest
#"rpart",
"C5.0",                                  #pack: C50
"LogitBoost",                            #pack: caTools
"adaboost",                              #pack: fastAdaboost
"randomGLM",                             #pack: randomGLM
"xgbTree"                                #pack: xgboost
#"elm",                                  #pack:elmNN
#"monmlp",
#"dnn",                                  #deepnet
#"nnet",
#"pcaNNet"                               #nnet
),
preProc = c("center", "scale"),    # Center and scale predictors for training
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
tuneLength = 2                     # Automatic Tuning Grid
)
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
#svmRadial
#RMSE   Rsquared        MAE
#50.5499016  0.2531654 21.2976794
l_Acc_iq <- lapply(l_pred_mlist_iq, function(x) postResample(x, obs = y_iq_test))
l_Acc_iq
x_iq <- trainS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
y_iq <- trainS_iq[, 21]
y_iq <- as.numeric(y_iq)
class(y_iq)
x_iq_test <- testS_iq[, c(1, 3, 5, 7, 11, 13, 18:19)]
y_iq_test <- testS_iq[, 21]
#### Train, evaluate, forecast ####
## Train model - Selection
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
number = 10,
allowParallel = TRUE,
savePredictions = "final"
)
models_list_iq <- caretEnsemble::caretList(x = x_iq,
y = y_iq,
trControl = ctrl,
methodList = c("rf",
#"glm",
"gbm", #"glmboost",
"treebag",
#"parRF",                                 #pack: e1071
"extraTrees",                            #pack: extraTrees
"svmLinear", "svmRadial", "svmRadial",
"rotationForestCp",                      #pack: rotationForest
#"rpart",
"C5.0",                                  #pack: C50
"LogitBoost",                            #pack: caTools
"adaboost",                              #pack: fastAdaboost
"randomGLM",                             #pack: randomGLM
"xgbTree"                                #pack: xgboost
#"elm",                                  #pack:elmNN
#"monmlp",
#"dnn",                                  #deepnet
#"nnet",
#"pcaNNet"                               #nnet
),
preProc = c("center", "scale"),    # Center and scale predictors for training
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
tuneLength = 5                     # Automatic Tuning Grid
)
l_pred_mlist_iq <- lapply(models_list_iq, function(x) predict(x, newdata = x_iq_test))
#svmRadial
#RMSE   Rsquared        MAE
#50.5499016  0.2531654 21.2976794
l_Acc_iq <- lapply(l_pred_mlist_iq, function(x) postResample(x, obs = y_iq_test))
View(varLag_sj)
View(varLag_sj)
##
varLag_test_sj <- varLag_sj[-c(13:16, 19, 20) ,]
varLag_test_iq <- varLag_iq[-c(13:16, 19, 20) ,]
View(varLag_test_iq)
View(varLag_test_sj)
View(varLag_test_sj)
## Select varLags
varLag_test_sj <- varLag_sj[-c(13:16, 19, 20) ,]
varLag_test_iq <- varLag_iq[-c(13:16, 19, 20) ,]
lag_names_test <- c("precipitation_amt_mm_lag", "reanalysis_air_temp_k_lag", "reanalysis_avg_temp_k_lag", "reanalysis_dew_point_temp_k_lag",
"reanalysis_max_air_temp_k_lag", "reanalysis_min_air_temp_k_lag", "reanalysis_precip_amt_kg_per_m2_lag", "reanalysis_relative_humidity_percent_lag",
"reanalysis_sat_precip_amt_mm_lag", "reanalysis_specific_humidity_g_per_kg_lag", "reanalysis_tdtr_k_lag", "station_avg_temp_c_lag",
"station_max_temp_c_lag", "station_min_temp_c_lag")
length(lag_names_test)
lag_den_sj <- dengue_sj[, c(which(colnames(dengue_sj) %in% colnames(dengue_test_raw)))]
lag_den_iq <- dengue_iq[, c(which(colnames(dengue_iq) %in% colnames(dengue_test_raw)))]
length(which(colnames(lag_den_sj) %in% colnames(dengue_test)))
k <- NULL
nas <- NULL
rest <- NULL
for (k in c(1:ncol(dengue_test_sj[,c(5:18)]))){
variabel <- dengue_test_sj[,4+k]
variabel2 <- lag_den_sj[,4+k]
if (varLag_test_sj$lag[k] < 0){
nas <- c(rep(NA, abs(as.numeric(varLag_test_sj$lag[k]))))
lag_train <- variabel2[c((length(lag_den_sj[,4+k])-length(nas)+1):length(lag_den_sj[,4+k]))]
rest <- variabel[c(1:(length(dengue_test_sj[,4+k])-length(nas)))]
df.lagged <- data.frame(c(lag_train, rest))
} else {                                                           # no else as there is no positiv lag
}
colnames(df.lagged)[1] <- lag_names_test[k]
dengue_test_sj <- cbind(dengue_test_sj, df.lagged)
}
k <- NULL
nas <- NULL
rest <- NULL
df.lagged <- NULL
for (k in c(1:ncol(dengue_test_iq[,c(5:18)]))){
variabel <- dengue_test_iq[,4+k]
variabel2 <- lag_den_iq[,4+k]
if (varLag_test_iq$lag[k] < 0){
nas <- c(rep(NA, abs(as.numeric(varLag_test_iq$lag[k]))))
lag_train <- variabel2[c((length(lag_den_iq[,4+k])-length(nas)+1):length(lag_den_iq[,4+k]))]
rest <- variabel[c(1:(length(dengue_test_iq[,4+k])-length(nas)))]
df.lagged <- data.frame(c(lag_train, rest))
} else {
}
colnames(df.lagged)[1] <- lag_names_test[k]
dengue_test_iq <- cbind(dengue_test_iq, df.lagged)
}
View(dengue_test_sj)
View(dengue_test_iq)
x_sj_test_test <- dengue_test_sj[, c(which(colnames(dengue_test_sj) %in% colnames(x_sj_test)))]
for (i in c(1:8)) {
x_sj_test_test[, i] <- normalize(x_sj_test_test[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
x_iq_test_test <- dengue_test_iq[, c(which(colnames(dengue_test_iq) %in% colnames(x_iq_test)))]
for (i in c(1:8)) {
x_iq_test_test[, i] <- normalize(x_iq_test_test[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
View(x_sj_test)
View(x_sj_test)
x_sj_test_test <- dengue_test_sj[, c(which(colnames(dengue_test_sj) %in% colnames(x_sj_test)))]
View(x_sj_test_test)
View(x_sj_test_test)
x_sj_test
x_sj_test_test <- dengue_test_sj[, c(which(colnames(dengue_test_sj) %in% colnames(x_sj_test)))]
x_sj_test_test <- dengue_test_sj[, c(which(colnames(dengue_test_sj) %in% colnames(x_sj_test)))][, c(1:8)]
for (i in c(1:8)) {
x_sj_test_test[, i] <- normalize(x_sj_test_test[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
View(x_sj_test_test)
View(x_sj_test_test)
View(x_iq_test_test)
View(x_iq_test_test)
x_iq_test_test <- dengue_test_iq[, c(which(colnames(dengue_test_iq) %in% colnames(x_iq_test)))]
for (i in c(1:8)) {
x_iq_test_test[, i] <- normalize(x_iq_test_test[, i], method = "standardize", range = c(0, 1), margin = 1L)
}
l_Acc_iq
#### Model selected ####
# Define trainControl and train selected model
ctrl_fin <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
allowParallel = TRUE,
savePredictions = "final"
)
svmRad_sj <- caret::train(x = x_sj,
y = y_sj,
method = "svmRadial",
tuneLength = 5,
trControl = ctrl_fin,
preProc = c("center", "scale"),
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
#tuneGrid = data.frame(.C = c(2.0), .sigma = c(.2))       # Identified set of parameters
)
svmRad_iq <- caret::train(x = x_iq,
y = y_iq,
method = "svmRadial",
tuneLength = 5,
trControl = ctrl_fin,
preProc = c("center", "scale"),
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE,
#tuneGrid = data.frame(.C = c(.5), .sigma = c(0.1356796))  # Identified set of parameters
)
svmRad_sj <- caret::train(x = x_sj,
y = y_sj,
method = "svmRadial",
tuneLength = 5,
trControl = ctrl_fin,
preProc = c("center", "scale"),
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE
#tuneGrid = data.frame(.C = c(2.0), .sigma = c(.2))       # Identified set of parameters
)
svmRad_iq <- caret::train(x = x_iq,
y = y_iq,
method = "svmRadial",
tuneLength = 5,
trControl = ctrl_fin,
preProc = c("center", "scale"),
metric = "MAE",
tuneList = NULL,
continue_on_fail = TRUE
#tuneGrid = data.frame(.C = c(.5), .sigma = c(0.1356796))  # Identified set of parameters
)
## Predict
fin_pred_sj <- predict(svmRad_sj, newdata = x_sj_test)
## Predict
fin_pred_sj <- predict(svmRad_sj, newdata = x_sj_test)
svmRad_sj
svmRad_iq
## Evaluate
fin_Acc_svmRad_sj <- postResample(fin_pred_sj, obs = y_sj_test)
fin_Acc_svmRad_iq <- postResample(fin_pred_iq, obs = y_iq_test)
fin_Acc_svmRad_sj
fin_Acc_svmRad_iq
#### Predict Test Set ####
fin_pred_sj_test_test <- predict(svmRad_sj, newdata = x_sj_test_test)
fin_pred_iq_test_test <- predict(svmRad_iq, newdata = x_iq_test_test)
PREDICTION <- data.frame(cbind(dengue_test_raw[, c(1:3)], c(fin_pred_sj_test_test, fin_pred_iq_test_test)))
write.csv(PREDICTION, file = "final_prediction_svmRad_compl2.csv")
